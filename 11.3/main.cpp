#include <iostream>

using namespace std;

int main()
{
    //в примере ошибка, кстати говоря. Площадь указанного прямоугольника действительно максимальна, только равна она 6.
    int n, m;                                   //ввожу размер матрицы, ибо вводить матрицу без указания размеров - дело как минимум неблагодарное.
    cin >> m >> n;                              //m - горизонтали, n - вертикали.
    bool a[m][n];                               //С этим я бы провозился часов до 8 вечера. Отсутствие нормальных данных удручает.
    for(int i=0; i<m; i++)
        for(int j=0; j<n; j++)
            cin >> a[i][j];
    int x1=1, y1=1, x2=1, y2=1;
    int mx=0;
    bool c;
    for(int i=0; i<m; i++)                      // выбираем верхний левый угол прямоугольника на подходимость.
        for(int j=0; j<n; j++)
            if(a[i][j])                         // проверяем верхний левый угол прямоугольника на подходимость.
                for(int d=i; d<m; d++)          // выбираем нижний правый угол прямоугольника на подходимость.
                    for(int b=j; b<n; b++)
                        if(a[d][b])             // проверяем нижний правый угол прямоугольника на подходимость.
                        {
                            c=1;
                            for(int k=i; k<=d && c; k++)        //проверяем полученный прямоугольник на отсутствие нулей.
                                for(int l=j; l<=b && c; l++)
                                    c=(c&&(a[k][l]));
                            if(c && (mx<(d-i+1)*(b-j+1)))       //проверяем на максимальность.
                            {
                                x1=i+1;
                                y1=j+1;
                                x2=d+1;
                                y2=b+1;
                                mx=(d-i+1)*(b-j+1);
                            }

                        }
    if(mx==0)
        cout << "There is no place to build!";
    else
        cout << mx <<";" << x1 <<"," << y1 << ";" << x2 << "," << y2 << ".";
    return 0;
}
